@charset "utf-8";

@import "../../../../node_modules/sass-flex-mixin/flex";

// When Sass 3.2 was released some time ago, they made it possible to define names to our media queries, which makes
// the usage of them a lot cleaner. Instead of calling them @media (min-width: 600px) we can give them more semantic
// names like “breakpoint-large” or “breakpoint-a-really-large-computer-machine”.
//
// Usage:
// .sidebar {
//      width: 60%;
//      float: left;
//      margin: 0 2% 0 0;
//      @include bp-small {
//          width: 100%;
//          float: none;
//          margin: 0;
//      }
//  }

@mixin bp-large() {
    @media only screen and (max-width: 60em) {
        @content;
    }
}

@mixin bp-medium() {
    @media only screen and (max-width: 40em) {
        @content;
    }
}

@mixin bp-small() {
    @media only screen and (max-width: 30em) {
        @content;
    }
}

/*
* Responsive breakpoint mixin
*/

@mixin breakpoint($width) {
    @if $width == lg {
        @media only screen and (max-width:$breakpoint-lg) {
            @content;
        }
    }
    @else if $width == md {
        @media only screen and (max-width:$breakpoint-md) {
            @content;
        }
    }
    @else if $width == sm {
        @media only screen and (max-width:$breakpoint-sm) {
            @content;
        }
    }
    @else if $width == xs {
        @media only screen and (max-width:$breakpoint-xs) {
            @content;
        }
    }
}


@mixin animation ($str) {
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    -webkit-animation: #{$str};
    animation: #{$str};
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// Centerer
@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

// Box Shadow
@mixin box-shadow($top, $left, $blur, $color, $inset:false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

// Border Radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Single side border-radius
@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
  background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  border-top-left-radius: $radius;
  background-clip: padding-box;
}


// As with animations, transitions also make your code quite bloated which can hurt the readability. But this is also
// solved by using a mixin for it.
//
// USAGE:
//  a {
//      color: gray;
//      @include transition(color .3s ease);
//      &:hover {
//          color: black;
//      }
//  }

@mixin transition($args...) {
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    -webkit-transition: $args;
    transition: $args;
}

// There’s a lot of different clearfix hacks out there on the web. This one is created by (Nicolas Gallagher) (http://nicolasgallagher.com/micro-clearfix-hack)
// and I’ve found it to be the most solid one. Works in IE6 and up.
//
// USAGE:
//  .container-with-floated-children {
//      @extend %clearfix;
//  }

%clearfix {
    *zoom: 1;

    &:before,
    &:after {
        content: " ";
        display: table;
    }

    &:after {
        clear: both;
    }
}

/// Mixin to customize scrollbars
/// Beware, this does not work in all browsers
/// @author Hugo Giraudel
/// @param {Length} $size - Horizontal scrollbar's height and vertical scrollbar's width
/// @param {Color} $foreground-color - Scrollbar's color
/// @param {Color} $background-color [mix($foreground-color, white, 50%)] - Scrollbar's color
/// @example scss - Scrollbar styling
///   @include scrollbars(.5em, slategray);
@mixin scrollbars($size, $foreground-color, $background-color: rgba(0,0,0,.3)) {
  // For Google Chrome
  ::-webkit-scrollbar {
      width:  $size;
      height: $size;
  }

  ::-webkit-scrollbar-thumb {
      background: $foreground-color;
      @include border-top-radius(12px);
      @include border-bottom-radius(12px);
  }

  ::-webkit-scrollbar-track {
      -webkit-box-shadow: inset 0 0 4px $background-color;
      @include border-top-radius(12px);
      @include border-bottom-radius(12px);
  }

  // For Internet Explorer
  body {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color;
  }
}

// When you hide an element with display: none, that prevents screen readers from reading it to the user. Sometimes
// that’s fine, but in other cases this will make the site hard to use for people with screen readers. Thus, we have to
// use another technique for hiding elements while at the same time make them accessible.
// In this example, we are using the Sass placeholder selector since the output will always be the same, which enables
// us to reduce repetetive code in the output.
//
// USAGE:
//  .visually-hidden {
//      @extend %visuallyhidden;
//  }

%visuallyhidden {
    clip: rect(0, 0, 0, 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

// Mixin printing a linear-gradient
// as well as a plain color fallback
// and the `-webkit-` prefixed declaration
// @access public
// @param {Keyword | Angle} $direction - Linear gradient direction
// @param {Arglist} $color-stops - List of color-stops composing the gradient
// a keyword value among
//  - to top,
//  - to top right (or to right top),
//  - to right,
//  - to bottom right (or to right bottom),
//  - to bottom,
//  - to bottom left (or to left bottom),
//  - to left,
//  - to left top (or to top left);
// an angle either
//  - in deg,
//  - rad,
//  - grad or turn.
@mixin linear-gradient($direction, $color-stops...) {
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}



@mixin box-shadow($horiz: .5em , $vert: .5em , $blur: 0px , $spread: 0px , $color: #000000) {
    -webkit-box-shadow: $horiz $vert $blur $spread $color;
    -moz-box-shadow: $horiz $vert $blur $spread $color;
    box-shadow: $horiz $vert $blur $spread $color;
}

// Global Navigation Mixin
@mixin make-global-notification($bgcolor, $fgcolor) {
    background-color: $bgcolor;
    border: solid 1px darken($bgcolor, 20%);
    .close {
        color: $fgcolor;

        &:hover {
            color: $fgcolor;
        }
    }

    &.icon {
        background-image: none;

        &:before {
            color: $fgcolor;
            font-size: $theme-font-size-base * 1.2;
            position: absolute;
        }

    }

    .growl-title {
        color: $fgcolor;
    }

    .growl-message {
        color: $fgcolor;
    }
}

@mixin simple-transition() {
  @include transition(all .15s ease-in-out);
}

@mixin no-transition() {
  @include transition-property(none);
}

@mixin shadow-default() {
  @include box-shadow(1px, 2px, 3px, 0, rgba(0, 0, 0, .2));
}

@mixin shadow-thin() {
  @include box-shadow(0, 1px, 1px, 0, rgba(0, 0, 0, .2));
}

@mixin shadow-none() {
  @include box-shadow(0, 0, 0, 0, rgba(0, 0, 0, 0));
}


// Animation - Spinner
@include keyframes(spin) {
  0% {
    @include transform(rotate(0deg));
  }
  100% {
    @include transform(rotate(360deg));
  }
}

// Animation - Shrink
@include keyframes(shrinkX) {
  0% {
    left: 0px;
    width: 100%;
  }
  100% {
    left: 50%;
    width: 0%;
  }
}

// Animation - Grow
@include keyframes(growX) {
  0% {
    left: 50%;
    width: 0%;
  }
  100% {
    left: 0px;
    width: 100%;
  }
}


// Droppable Region
@mixin droppable-region() {
    @include border-radius(2px);
    border: dashed 2px $color-medium-grey;
}

// Draggable Item

@mixin draggable-item() {
    @include border-radius(2px);
    border: dashed 1px $color-medium-grey;

    &:hover {
        @include draggable-item-active();
    }
}

// Draggable Item Active

@mixin draggable-item-active() {
    @include border-radius(2px);
    border: dashed 1px $color-blue;
}